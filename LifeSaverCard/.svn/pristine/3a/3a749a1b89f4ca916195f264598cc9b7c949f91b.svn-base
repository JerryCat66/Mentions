package com.byth.lifesaver.function.mine.fragment;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;

import com.byth.lifesaver.R;
import com.byth.lifesaver.api.OrderAPI;
import com.byth.lifesaver.base.BaseFragment;
import com.byth.lifesaver.bean.OrderBean;
import com.byth.lifesaver.function.mine.activity.ActivityOrderDetail;
import com.byth.lifesaver.http.ApiException;
import com.byth.lifesaver.http.HttpSubscriber;
import com.byth.lifesaver.http.SubscriberOnNextListener;
import com.byth.lifesaver.util.Contants;
import com.byth.lifesaver.util.ImageLoaderUtil;
import com.byth.lifesaver.util.LoadType;
import com.byth.lifesaver.widget.refreshlayout.RefreshLayout;
import com.byth.lifesaver.widget.refreshlayout.RefreshLayoutDirection;
import com.fenguo.library.adapter.BaseAdapterHelper;
import com.fenguo.library.adapter.QuickAdapter;
import com.fenguo.library.util.JsonUtil;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import butterknife.ButterKnife;
import butterknife.InjectView;
import okhttp3.MediaType;
import okhttp3.RequestBody;

/**
 * Created by Administrator on 2017/6/12 0012.
 * 待付款fragment
 * TODO
 */

public class FragmentOrderWaitForPaying extends BaseFragment implements AdapterView.OnItemClickListener {
    @InjectView(R.id.list)
    ListView listView;
    @InjectView(R.id.refresh)
    RefreshLayout refreshLayout;
    @InjectView(R.id.ll_noData)
    LinearLayout llNoData;
    private List<OrderBean.data> data;
    private QuickAdapter<OrderBean.data> adapter;
    private HttpSubscriber httpSubscriber;
    private String orderStatus;//订单状态
    private Bundle bundle = new Bundle();
    private Integer pageNum;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = setContentView(inflater, R.layout.fragment_my_order);
        ButterKnife.inject(this, view);
        return view;
    }

    @Override
    public void onResume() {
        super.onResume();
        //getUnPayOrderList();
    }

    @Override
    protected void receiveDataFromPreActivity() {

    }

    @Override
    protected void initComponent() {
        setRefreshLayout(refreshLayout);
        listView.setAdapter(adapter);
        pageNum = 1;
        getUnPayOrderList();
    }

    @Override
    protected void initListener() {
        refreshLayout.setOnRefreshListener(new RefreshLayout.OnRefreshListener() {
            @Override
            public void onPullDownToRefresh() {
                pageNum = 1;
                loadType = LoadType.ReplaceALL;
                refreshLayout.setDirection(RefreshLayoutDirection.BOTH);
                getUnPayOrderList();
            }

            @Override
            public void onPullUpToRefresh() {
                pageNum += 1;
                getUnPayOrderList();
            }
        });
        listView.setOnItemClickListener(this);
    }

    /**
     * 获取待付款订单列表
     */
    private void getUnPayOrderList() {
        unSub();
        httpSubscriber = new HttpSubscriber(onUnPayOrderList);
        orderStatus = "UNPAY";
        bundle.putString("status", orderStatus);
        Map<String, String> map = new HashMap<>();
        map.put("orderStatus", orderStatus);
        map.put("pageNum", String.valueOf(pageNum));
        map.put("pageSize", String.valueOf(Contants.PAGE_SIZE));
        RequestBody body = RequestBody.create(MediaType.parse("Content-Type, application/json"), JsonUtil.toJson(map));
        OrderAPI.getInstance().getOrderList(httpSubscriber, body);
    }

    SubscriberOnNextListener<List<OrderBean.data>> onUnPayOrderList = new SubscriberOnNextListener<List<OrderBean.data>>() {
        @Override
        public void onStart() {
            showLoadingDialog();
        }

        @Override
        public void onNext(List<OrderBean.data> datas) {
            hideLoadingDialog();
            data = datas;
            refreshDatas();
        }

        @Override
        public void onApiError(ApiException e) {
            hideLoadingDialog();
            showToast(e.getMessage());
        }

        @Override
        public void onNetworkError(Throwable e) {
            hideLoadingDialog();
            showToast(e.getMessage());
        }

        @Override
        public void onOtherError(Throwable e) {
            hideLoadingDialog();
            showToast(e.getMessage());
        }

        @Override
        public void onCompleted() {
            hideLoadingDialog();
        }
    };

    /**
     * 刷新数据
     */
    @Override
    public void refreshDatas() {
        super.refreshDatas();
        if (loadType == LoadType.AddAll) {
            adapter.addAll(data);
        } else if (loadType == LoadType.ReplaceALL) {
            adapter.replaceAll(data);
        }
        if (refreshLayout.isRefreshing()) {
            refreshLayout.setRefreshing(false);
        }
        if (data.size() == 0) {
            llNoData.setVisibility(View.VISIBLE);
        } else {
            llNoData.setVisibility(View.GONE);
        }
    }

    @Override
    protected void initData() {
        data = new ArrayList<>();
        if (adapter == null) {
            adapter = new QuickAdapter<OrderBean.data>(getActivity(), R.layout.item_my_order) {
                @Override
                protected void convert(BaseAdapterHelper helper, OrderBean.data item) {
                    ImageView imageView = helper.getView(R.id.image_card);
                    helper.setText(R.id.card_name, item.getGoodsName())
                            .setText(R.id.card_year, "使用年限" + String.valueOf(item.getYears()) + "年")
                            .setText(R.id.money_of_pay, "实付款:￥" + String.valueOf(item.getSum()) + "元");
                    ImageLoaderUtil.display(getActivity(), imageView, item.getImage());
                    helper.setText(R.id.card_status, "待付款");
                    helper.setVisible(R.id.checkLogistic, false);
                    helper.setVisible(R.id.buy_again, true);
                    helper.setText(R.id.buy_again, "付款");
                    bundle.putInt("id", item.getId());
                }
            };
        }
    }

    @Override
    protected void immersionInit() {

    }

    //解除订阅
    private void unSub() {
        if (httpSubscriber != null) {
            httpSubscriber.unSubscribe();
        }
    }

    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        openActivityNotClose(ActivityOrderDetail.class, bundle);
    }
}
