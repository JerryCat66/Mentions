package com.byth.lifesaver.function.home;

import android.os.Bundle;
import android.os.Handler;
import android.support.v4.view.ViewPager;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.byth.lifesaver.MainActivity;
import com.byth.lifesaver.R;
import com.byth.lifesaver.adapter.MainGridAdapter;
import com.byth.lifesaver.adapter.ViewPagerAdapter;
import com.byth.lifesaver.api.HomeAPI;
import com.byth.lifesaver.base.BaseFragment;
import com.byth.lifesaver.bean.CardRenewBean;
import com.byth.lifesaver.function.card.activity.ActivityCardDetail;
import com.byth.lifesaver.function.card.activity.ActivityCardInfoConfirm;
import com.byth.lifesaver.function.card.activity.ActivityRenewCard;
import com.byth.lifesaver.function.mine.activity.ActivityAccountManager;
import com.byth.lifesaver.function.mine.activity.ActivityMyOrder;
import com.byth.lifesaver.http.ApiException;
import com.byth.lifesaver.http.HttpResult;
import com.byth.lifesaver.http.HttpSubscriber;
import com.byth.lifesaver.http.SubscriberOnNextListener;
import com.byth.lifesaver.widget.MyGridView;
import com.byth.lifesaver.widget.refreshlayout.RefreshLayout;
import com.fenguo.library.util.JsonUtil;
import com.fenguo.library.util.NetworkUtil;
import com.gyf.barlibrary.ImmersionBar;

import butterknife.ButterKnife;
import butterknife.InjectView;
import okhttp3.MediaType;
import okhttp3.RequestBody;

/**
 * Created by Administrator on 2017/5/26 0026.
 * 主页
 */

public class HomeFragment extends BaseFragment implements AdapterView.OnItemClickListener, View.OnClickListener {
    @InjectView(R.id.rl_network)
    RelativeLayout rlNetwork;
    @InjectView(R.id.Home_ViewPager)
    ViewPager Home_ViewPager;
    @InjectView(R.id.indicatorContainer)
    LinearLayout ll_indicator;
    @InjectView(R.id.main_grid)
    MyGridView mainGrid;
    @InjectView(R.id.Introduce)
    RelativeLayout llIntroduce;
    @InjectView(R.id.NewsCenter)
    RelativeLayout llNewsCenter;
    @InjectView(R.id.Outlets)
    RelativeLayout llOutlets;
    @InjectView(R.id.hot_line)
    TextView tvHotLine;
    private int status;
    private boolean isRenew;//是否可以续卡
    private volatile static HomeFragment homeFragment;
    private ViewPagerAdapter viewPagerAdapter;
    private MainGridAdapter mainGridAdapter;
    private Handler handler;
    private HttpSubscriber httpSubscriber;

    public HomeFragment() {

    }

    public static HomeFragment getInstance() {
        if (homeFragment == null) {
            synchronized (HomeFragment.class) {
                if (homeFragment == null) {
                    homeFragment = new HomeFragment();
                }
            }
        }
        return homeFragment;
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = setContentView(inflater, R.layout.fragment_home);
        ButterKnife.inject(view);
        return view;
    }

    @Override
    protected void receiveDataFromPreActivity() {

    }

    @Override
    protected void immersionInit() {
        ImmersionBar.with(getActivity())
                .statusBarDarkFont(true)
                .statusBarColor(R.color.color_main)
                .fitsSystemWindows(true)
                .init();
    }

    @Override
    protected void initComponent() {
        status = 1;
        handler = new Handler();
        viewPagerAdapter = new ViewPagerAdapter(getActivity(), status);
        Home_ViewPager.setAdapter(viewPagerAdapter);
        handler.post(adScrollRun);
        mainGridAdapter = new MainGridAdapter(getActivity());
        mainGrid.setAdapter(mainGridAdapter);
        mainGrid.setOnItemClickListener(this);
    }

    /**
     * 开启线程跑轮播
     */
    private Runnable adScrollRun = new Runnable() {
        @Override
        public void run() {
            if (viewPagerAdapter.pageIndex < Integer.MAX_VALUE && viewPagerAdapter.getAdListSize() > 0) {
                Home_ViewPager.setCurrentItem(viewPagerAdapter.pageIndex++, true);
                handler.postDelayed(this, 5000);//每张图片显示五秒
            }
        }
    };

    @Override
    protected void initListener() {
        llIntroduce.setOnClickListener(this);
        llNewsCenter.setOnClickListener(this);
        llOutlets.setOnClickListener(this);
        tvHotLine.setOnClickListener(this);
        Home_ViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {

            }

            @Override
            public void onPageSelected(int position) {
                for (int i = 0; i < ll_indicator.getChildCount(); i++) {
                    if (i == (position % viewPagerAdapter.getAdListSize())) {
                        ll_indicator.getChildAt(i).setBackgroundResource(R.drawable.origin_press_icon);
                    } else {
                        ll_indicator.getChildAt(i).setBackgroundResource(R.drawable.origin_norma_icon);
                    }
                }
            }

            @Override
            public void onPageScrollStateChanged(int state) {

            }
        });
    }

    @Override
    protected void initData() {

    }

    @Override
    public void onPause() {
        super.onPause();
    }

    @Override
    public void onStop() {
        super.onStop();
        ll_indicator.removeAllViews();
        handler.removeCallbacks(adScrollRun);
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        ButterKnife.reset(this);
        ImmersionBar.with(getActivity()).destroy();
    }

    @Override
    public void onResume() {
        super.onResume();
        if (NetworkUtil.checkConnection(getActivity())) {
            rlNetwork.setVisibility(View.GONE);
        } else {
            rlNetwork.setVisibility(View.VISIBLE);
        }
        addIndicator();
    }

    private void addIndicator() {
        for (int i = 0; i < viewPagerAdapter.getAdListSize(); i++) {
            ImageView view = new ImageView(getActivity());
            LinearLayout.LayoutParams layout = new LinearLayout.LayoutParams(
                    25, 25);
            layout.setMargins(10, 0, 0, 0);
            view.setLayoutParams(layout);
            view.setScaleType(ImageView.ScaleType.FIT_XY);
            view.setPadding(20, 20, 20, 20);
            if (i == 0) {
                view.setBackgroundResource(R.drawable.origin_press_icon);
            } else {
                view.setBackgroundResource(R.drawable.origin_norma_icon);
            }
            ll_indicator.addView(view);
        }
    }

    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        switch (position) {
            case 0:
                //((MainActivity) getActivity()).rgMain.check(R.id.emergency);//救援界面
                openActivityNotClose(ActivityCardDetail.class, null);//购买卡片
                break;
            case 1:
                openActivityNotClose(ActivityCardInfoConfirm.class, null);//卡片激活
                break;
            case 2:
                getIsRenewTag();
                break;
            case 3:
                openActivityNotClose(ActivityMyOrder.class, null);//我的订单
                break;
            case 4:
                openActivityNotClose(ActivityAccountManager.class, null);//账户管理
                break;
            case 5:
                //消息通知
                break;
        }
    }

    //获取是否可以进行续卡标识
    private void getIsRenewTag() {
        unSub();
        httpSubscriber = new HttpSubscriber(onNextListener);
        RequestBody body = RequestBody.create(MediaType.parse("Content-Type, application/json"), "");
        HomeAPI.getInstance().getIsRenewTag(httpSubscriber, body);
    }

    SubscriberOnNextListener<CardRenewBean> onNextListener = new SubscriberOnNextListener<CardRenewBean>() {
        @Override
        public void onStart() {
            showLoadingDialog();
        }

        @Override
        public void onNext(CardRenewBean cardRenewBean) {
            hideLoadingDialog();
            isRenew = cardRenewBean.isRenew();
            if (isRenew) {
                openActivityNotClose(ActivityRenewCard.class, null);//卡续费
            } else {
                showToast("您还没有激活的卡,无法续费");
            }
        }

        @Override
        public void onApiError(ApiException e) {
            hideLoadingDialog();
            showToast(e.getMessage());
        }

        @Override
        public void onNetworkError(Throwable e) {
            hideLoadingDialog();
            showToast(e.getMessage());
        }

        @Override
        public void onOtherError(Throwable e) {
            hideLoadingDialog();
            showToast(e.getMessage());
        }

        @Override
        public void onCompleted() {
            hideLoadingDialog();
        }
    };

    //解除订阅
    private void unSub() {
        if (httpSubscriber != null) {
            httpSubscriber.unSubscribe();
        }
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.Introduce:
                break;
            case R.id.NewsCenter:
                break;
            case R.id.Outlets:
                break;
            case R.id.hot_line:
                telPhone(getResources().getString(R.string.hot_line_of_company));
                break;
        }
    }
}
