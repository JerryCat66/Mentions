package com.byth.lifesaver.http;

import android.content.Context;
import android.widget.Toast;

import com.byth.lifesaver.api.API;

import java.util.concurrent.TimeUnit;

import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory;
import retrofit2.converter.gson.GsonConverterFactory;
import rx.Observable;
import rx.Subscriber;
import rx.android.schedulers.AndroidSchedulers;
import rx.functions.Func1;
import rx.schedulers.Schedulers;

/**
 * Created by Administrator on 2017/6/20 0020.
 * retrofit请求封装基类
 */

public class HttpMethod {
    private static final int DEFAULT_TIMEOUT = 5;
    private static volatile HttpMethod defaultHttpMethod;
    private Context context;

    private Retrofit mRetrofit;

    public HttpMethod() {

    }

    /**
     * 单例构造http请求方法
     *
     * @return
     */
    public static HttpMethod getInstance() {
        if (defaultHttpMethod == null) {
            synchronized (HttpMethod.class) {
                if (defaultHttpMethod == null) {
                    defaultHttpMethod = new HttpMethod();
                }
            }
        }
        return defaultHttpMethod;
    }

    public Retrofit retrofitBuild() {
        /**
         * 添加超时连接时间
         */
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        builder.connectTimeout(DEFAULT_TIMEOUT, TimeUnit.SECONDS);
        mRetrofit = new Retrofit.Builder()
                .client(builder.build())
                .addConverterFactory(GsonConverterFactory.create())
                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())
                .baseUrl(API.url)
                .build();
        return mRetrofit;
    }

    /**
     * 观察者模式，把observable（被观察者）和subscriber (观察者)通过subscribe实现订阅关系
     * 由于网络请求是耗时任务，所以我们必须添加线程管理
     *
     * @param observable
     * @param subscriber
     * @param <T>
     */
    public <T> void toSubscribe(Observable<T> observable, Subscriber<T> subscriber) {
        /**
         * 订阅和解除订阅都发生在io线程
         * 返回数据改变ui发生在主线程
         * 遵循链式设计，所以观察者订阅订阅者
         */
        observable.subscribeOn(Schedulers.io())
                .unsubscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(subscriber);
    }

    /**
     * 用来统一处理Http的resultCode,并将HttpResult的Data部分剥离出来返回给subscriber
     * <p/>
     * Subscriber真正需要的数据类型，也就是Data部分的数据类型
     */
    public class HttpResultFunc<T> implements Func1<HttpResult<T>, T> {
        @Override
        public T call(HttpResult<T> tHttpResult) {
            for (int i = 0; i < tHttpResult.getMessage().size(); i++) {
                if (!tHttpResult.getMessage().get(i).getCode().equals("100001") || !tHttpResult.getMessage().get(i).getMessage().equals("请求成功")) {
                    Toast.makeText(context, tHttpResult.getMessage().get(i).getMessage(), Toast.LENGTH_SHORT).show();
                }
            }
            return tHttpResult.getData();
        }
    }
}
