package com.byth.lifesaver.function.auth;

import android.os.Bundle;
import android.support.v7.widget.AppCompatButton;
import android.support.v7.widget.Toolbar;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.byth.lifesaver.R;
import com.byth.lifesaver.api.AuthAPI;
import com.byth.lifesaver.base.FrameActivity;
import com.byth.lifesaver.http.ApiException;
import com.byth.lifesaver.http.HttpResult;
import com.byth.lifesaver.http.HttpSubscriber;
import com.byth.lifesaver.http.SubscriberOnNextListener;
import com.byth.lifesaver.util.MyCountDownTimer;
import com.fenguo.library.util.JsonUtil;
import com.fenguo.library.util.StringUtil;
import com.gyf.barlibrary.ImmersionBar;

import java.util.HashMap;

import butterknife.InjectView;
import okhttp3.MediaType;
import okhttp3.RequestBody;

/**
 * Created by Administrator on 2017/5/23 0023.
 * 忘记密码
 */

public class ForgetPswStep1Activity extends FrameActivity implements View.OnClickListener {
    @InjectView(R.id.input_account)
    EditText edAccount;
    @InjectView(R.id.btnVerify)
    Button btnVerify;
    @InjectView(R.id.editVerify)
    EditText etVerify;
    @InjectView(R.id.btn_next)
    AppCompatButton btnNext;
    @InjectView(R.id.hot_line)
    TextView tvHotLine;
    @InjectView(R.id.link_login)
    TextView tvLogin;
    @InjectView(R.id.toolbar)
    Toolbar mToolbar;
    private MyCountDownTimer downTimer;
    private String type;
    private HttpSubscriber httpSubscriber;

    @Override
    protected void receiveDataFromPreActivity() {

    }

    @Override
    protected void initData() {

    }

    @Override
    protected void initComponent() {
        setContentView(R.layout.activity_forget_psw_step1);
        setToolbar(mToolbar);
        ImmersionBar.with(this)
                .statusBarDarkFont(true)
                .fitsSystemWindows(true)
                .statusBarColor(R.color.color_main)
                .init();
    }

    @Override
    protected void initListener() {
        edAccount.addTextChangedListener(textWatcher1);
        btnVerify.setOnClickListener(this);
        etVerify.addTextChangedListener(textWatcher2);
        btnNext.setOnClickListener(this);
        btnNext.setClickable(false);
        tvHotLine.setOnClickListener(this);
        tvLogin.setOnClickListener(this);
    }

    private TextWatcher textWatcher1 = new TextWatcher() {
        @Override
        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

        }

        @Override
        public void onTextChanged(CharSequence s, int start, int before, int count) {

        }

        @Override
        public void afterTextChanged(Editable s) {
            String strPhone = s.toString();
            if (strPhone.length() == 11) {
                checkMobile(strPhone);
            }
        }
    };

    /**
     * 此处输入手机号码应该验证手机号码是否已经注册,是否有效,调用接口
     *
     * @param phone
     */
    private void checkMobile(String phone) {
        if (phone.equals("18620943560")) {
            btnVerify.setClickable(true);
            btnVerify.setBackgroundColor(getResources().getColor(R.color.colorPrimary));
        } else {
            btnVerify.setClickable(false);
            btnVerify.setBackgroundResource(R.drawable.btn_gray);
        }
    }

    private TextWatcher textWatcher2 = new TextWatcher() {
        @Override
        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

        }

        @Override
        public void onTextChanged(CharSequence s, int start, int before, int count) {

        }

        @Override
        public void afterTextChanged(Editable s) {
            showColorWithInput();
        }
    };


    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.btnVerify:
                if (StringUtil.isEmpty(edAccount.getText().toString().trim())) {
                    showToast("请输入手机号码");
                    return;
                }
                downTimer = new MyCountDownTimer(btnVerify);
                downTimer.start();
                getVerifyCode(edAccount.getText().toString().trim());
                break;
            case R.id.btn_next:
                checkRequire();
                break;
            case R.id.link_login:
                openActivityNotClose(LoginActivity.class, null);
            case R.id.hot_line://公司电话
                telPhone(getResources().getString(R.string.hot_line_of_company));
                break;
        }
    }

    /**
     * 获取验证码
     *
     * @param phoneNum
     */
    private void getVerifyCode(String phoneNum) {
        unSub();
        phoneNum = edAccount.getText().toString();
        type = "FP";
        httpSubscriber = new HttpSubscriber(onForgetPasswordNextListener);
        HashMap<String, String> map = new HashMap<>();
        map.put("mobileNo", phoneNum);
        map.put("type", type);
        RequestBody body = RequestBody.create(MediaType.parse("Content-Type, application/json"), JsonUtil.toJson(map));
        AuthAPI.getInstance().getRegisterCodeWithRetrofit(httpSubscriber, body);
    }

    SubscriberOnNextListener<HttpResult> onForgetPasswordNextListener = new SubscriberOnNextListener<HttpResult>() {
        @Override
        public void onStart() {
            showLoadingDialog();
        }

        @Override
        public void onNext(HttpResult result) {
            showToast("获取验证码成功");
            hideLoadingDialog();
        }

        @Override
        public void onApiError(ApiException e) {
            hideLoadingDialog();
            showToast(e.getMessage());
        }

        @Override
        public void onNetworkError(Throwable e) {
            hideLoadingDialog();
            showToast(e.getMessage());
        }

        @Override
        public void onOtherError(Throwable e) {
            hideLoadingDialog();
            showToast(e.getMessage());
        }

        @Override
        public void onCompleted() {
            hideLoadingDialog();
        }
    };

    /**
     * 释放资源
     */
    private void unSub() {
        if (httpSubscriber != null) {
            httpSubscriber.unsubscribe();
        }
    }

    /**
     * 检查必填项
     */
    private void checkRequire() {
        String phoneNum = edAccount.getText().toString().trim();
        String verifyCode = etVerify.getText().toString().trim();
        if (StringUtil.isEmpty(phoneNum)) {
            showToast("请输入手机号码");
            return;
        } else if (StringUtil.isEmpty(verifyCode)) {
            showToast("验证码不能为空");
            return;
        } else {
            toNextStep();
        }
    }

    /**
     * 点击下一步事件,需调用接口
     */
    private void toNextStep() {
        String phoneNum = edAccount.getText().toString().trim();
        Bundle bundle = new Bundle();
        bundle.putString("phoneNum", phoneNum);
        openActivityNotClose(ForgetPswStep2Activity.class, bundle);
    }

    /**
     * 根据输入框的值显示不同的颜色
     */
    private void showColorWithInput() {
        String regPhone = edAccount.getText().toString().trim();
        String regVerifyCode = etVerify.getText().toString().trim();
        if (StringUtil.isEmpty(regPhone) || StringUtil.isEmpty(regVerifyCode)) {
            btnNext.setClickable(false);
            btnNext.setBackgroundResource(R.drawable.shape_register_button);
        } else {
            btnNext.setClickable(true);
            btnNext.setBackgroundResource(R.drawable.bg_login_btn_selector);
        }
    }

    @Override
    protected void onStop() {
        super.onStop();
        if (downTimer != null) {
            downTimer.cancel();
            btnVerify.setClickable(true);
            btnVerify.setText("获取验证码");
        }
    }
}
